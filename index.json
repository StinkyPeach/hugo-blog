[{"contents":" 由于OpenWrt默认镜像的分区空间一般只有100M左右，无法满足一些日常操作，比如运行容器和一些web服务等。本期我们尝试在成功刷入OpenWrt后，如何对根分区进行扩容。\nOpenWrt镜像一般分为2个大类，扩容就是将存储未格式化的部分加入使用。\nEXT4固件 SQUASHFS固件（可恢复出厂设置，重置固件） EXT4 固件扩容 这个固件扩容一般有2种方式。\n固件扩容方式一 # 列出磁盘 fdisk -l # 选择需要操作的磁盘 fdisk /dev/mmcblk0 # 输入p, 查看分区信息 p # 输入n, 创建新分区, 具体操作可查看下图创建新分区 n # 分区创建完成后，可查看磁盘分区信息 fdisk -l # 格式化新分区 mkfs.ext4 /dev/mmcblk0p3 # 网页更改挂载点 # 重启 reboot 列出磁盘信息\n查看分区信息\n创建信息分区（注意：创建新分区时，first sector值一定要大于原分区的end值，具体值需要通过p命令查看）\n查看创建分区后的信息，可知/dev/mmcblk0p3就是刚刚创建的新分区\n格式化新分区\n网页更改挂载点\n选择新创建的分区 作为根文件系统使用 然后复根目录准备命令到记事本，然后更改/dev/sda1为新创建的分区 勾选已启用 最后选择保存 保存并运用 如图所示\n将根目录准备命令修改后全部复制到终端执行，然后重启\n重启后分区扩容就完成了\n固件扩容方式二 # 列出磁盘 fdisk -l # 选择需要操作的磁盘 fdisk /dev/mmcblk0 # 输入p, 查看分区信息 p # 输入d, 删除分区 d # 输入n, 创建分区 n # 分区创建完成后，可查看磁盘分区信息 fdisk -l # 使用新创建的磁盘空间 # 查看循环设备, 如果有输出，就别使用这个输出的设备就行 losetup # /dev/loop0循环设备路径 /dev/mmcblk0p2 新分区路径 losetup /dev/loop0 /dev/mmcblk0p2 新分区路径 resize2fs -f /dev/loop0 # 如果是x86固件，并且固件带efi字样的需要在设备重启之前更改一下系统引导，具体请看单独的章节\u0026#34;x86固件更改part uuid\u0026#34; reboot 列出磁盘信息\n查看分区信息\n删除mmcblk0p2分区（注意：记住这个分区的start值，现在是147456）\n创建新分区（注意：新分区的first sector的值是上一步记住的start值）\n列出磁盘分区信息\n调整应用空间\nSQUASHFS固件扩容 # 查看磁盘空间信息 df -h # 查看磁盘信息 fdisk -l # 操作磁盘 fdisk /dev/sda # 输入p, 查看分区信息 p # 输入n, 创建分区 n # 如果是x86固件，并且固件带efi字样的需要在设备重启之前更改一下系统引导，具体请看单独的章节\u0026#34;x86固件更改part uuid\u0026#34; # 分区创建完成后，重启 reboot df -h # /dev/loop0是df -h显示的循环设备 resize2fs -f /dev/loop0 查看磁盘空间信息（注意循环设备路径，下面需要使用）\n查看分区信息\n删除sda2分区（注意：记住这个分区的start值，现在是33792）\n创建新分区（注意：新分区的first sector的值是上一步记住的start值）\n分区创建完成后，重启\n调整并应用扩容空间\nx86固件更改part uuid blkid # 复制part uuid # 更改系统引导参数 vim /boot/grub/grub.cfg 查看part uuid\n更改系统引导，将part uuid更改为复制的新分区的part uuid\n更改完成后就可以重启了。\n","date":"June 10, 2025 Thursday","permalink":"https://www.litao.in/posts/20250610_expand_root_partition_on_openwrt/","tags":["OpenWrt"],"title":"Expand Root Partition On OpenWrt"},{"contents":" 细心的朋友可能发现了，wsl2在使用过程中，磁盘占用空间会越来越大，但是实际占用空间可能没那么大，如若置之不理，最后会撑爆我们的磁盘🥲🥲🥲。\n关闭wsl 首先我们通过管理员模式打开命令行窗口,我这里就以git-bash来做演示。\nwsl.exe -l -v wsl.exe --shutdown wsl.exe -l -v 原始wsl磁盘空间 进入子系统磁盘所在目录，执行命令。\nls -lh 可以看到现在目前占用磁盘109G。\n注意：压缩前请尽可能的释放wsl2子系统的磁盘空间，比如删除不需要的文件，镜像等\n执行压缩 执行diskpart命令进行磁盘压缩。\ndiskpart.exe # 这里使用windows的路径格式,指定wsl的磁盘路径 select vdisk file=\u0026#34;d:\\wsl\\ubuntu-24.04\\ext4.vhdx\u0026#34; 如图，已经选中磁盘文件，最后只需要压缩即可。\n# 压缩 compact vdisk # 退出 exit 静静等待完成即可。大概几分钟😁😁😁。\n查看压缩后的磁盘空间 ls -lh 可以看到压缩磁盘后，占用磁盘75G，压缩的磁盘空间大小取决于需要先删除子系统里的不需要的文件。\n","date":"December 20, 2024 Thursday","permalink":"https://www.litao.in/posts/20241220_compact_wsl_disk/","tags":["wsl"],"title":"Compact Disk For WSL2"},{"contents":" 本次使用kubeadm 搭建k8s 集群，总共3台服务器（ubuntu20.04)， k8s版本为1.22.2\n环境 k8s-master 192.168.30.130 k8s-node1 192.168.30.131 k8s-node2 192.168.30.132 关闭防火墙 3台服务器都需要关闭防火墙\nufw disable 关闭swap 3台服务器都需要关闭swap\n# 临时关闭swap swapoff -a # 永久关闭 sed -ri \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab 修改主机名称 # 修改192.168.30.130 主机名称为k8s-master hostnamectl set-hostname k8s-master # 修改192.168.30.131 主机名称为k8s-node1 hostnamectl set-hostname k8s-node1 # 修改192.168.30.130 主机名称为k8s-node2 hostnamectl set-hostname k8s-node2 添加主机名解析 3台服务器都需要添加\nvim /etc/hosts ## 添加下列文本 # k8s 192.168.30.130 k8s-master 192.168.30.131 k8s-node1 192.168.30.132 k8s-node2 安装docker 3台服务器都需要安装\ncd /home curl -fsSL https://get.docker.com -o get-docker.sh chmod +x get-docker.sh # 使用阿里云的镜像 ./get-docker.sh --mirror Aliyun # 等待安装成功 # 修改docker镜像加速和Cgroup Driver vim /etc/docker/daemon.json # 修改为 { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://dhq9bx4f.mirror.aliyuncs.com\u0026#34;], \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;] } # 重启docker systemctl daemon-reload systemctl restart docker 安装 kubelet kubectl kubeadm 3台服务器都需要安装\ncurl -fsSL https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - #新增源 add-apt-repository \u0026#34;deb [arch=amd64] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\u0026#34; apt-get update # 查看是否存在该版本 apt-cache madison kubelet kubectl kubeadm | grep \u0026#39;1.22.2-00\u0026#39; apt-get install -y kubelet=1.22.2-00 kubectl=1.22.2-00 kubeadm=1.22.2-00 ## 等待安装成功 kubectl version --client=true -o json { \u0026#34;clientVersion\u0026#34;: { \u0026#34;major\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;minor\u0026#34;: \u0026#34;22\u0026#34;, \u0026#34;gitVersion\u0026#34;: \u0026#34;v1.22.2\u0026#34;, \u0026#34;gitCommit\u0026#34;: \u0026#34;8b5a19147530eaac9476b0ab82980b4088bbc1b2\u0026#34;, \u0026#34;gitTreeState\u0026#34;: \u0026#34;clean\u0026#34;, \u0026#34;buildDate\u0026#34;: \u0026#34;2021-09-15T21:38:50Z\u0026#34;, \u0026#34;goVersion\u0026#34;: \u0026#34;go1.16.8\u0026#34;, \u0026#34;compiler\u0026#34;: \u0026#34;gc\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;linux/amd64\u0026#34; } } # 有以上显示 表示安装成功 初始化k8s-master # apiserver-advertise-address 代表你的k8s-master的ip # image-repository 使用阿里云的镜像 kubeadm init \\ --apiserver-advertise-address=192.168.30.130 \\ --image-repository registry.aliyuncs.com/google_containers \\ --kubernetes-version v1.22.2 \\ --ignore-preflight-errors=Swap \\ --pod-network-cidr=10.244.0.0/16 \\ --service-cidr=10.1.0.0/16 ## 等待安装，成功后执行 # start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config # Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf # 安装成功后 Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \u0026#34;kubectl apply -f [podnetwork].yaml\u0026#34; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ Then you can join any number of worker nodes by running the following on each as root: kubeadm join 192.168.30.130:6443 --token 56bthi.poohqb2p2mavk1am \\ --discovery-token-ca-cert-hash sha256:c964563c7a38a633746225ff6d23f40fde626d7d796b01bffb299a84efbdcf82 k8s网络 You should now deploy a pod network to the cluster. Run \u0026ldquo;kubectl apply -f [podnetwork].yaml\u0026rdquo; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/\n使用的flannel的overlay 实现多节点pod通信\n# k8s-master kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml # 成功后使用kubectl 查看pods kubectl get pods -A kube-system coredns-7f6cbbb7b8-ff64c 1/1 Running 0 23h kube-system coredns-7f6cbbb7b8-txc5w 1/1 Running 0 23h kube-system etcd-k8s-master 1/1 Running 0 23h kube-system kube-apiserver-k8s-master 1/1 Running 0 23h kube-system kube-controller-manager-k8s-master 1/1 Running 0 23h kube-system kube-flannel-ds-8g5st 1/1 Running 0 23h kube-system kube-flannel-ds-njjgg 1/1 Running 0 23h kube-system kube-flannel-ds-v46xq 1/1 Running 0 22h kube-system kube-proxy-l7rxg 1/1 Running 0 23h kube-system kube-proxy-pfcbb 1/1 Running 0 23h kube-system kube-proxy-q289f 1/1 Running 0 22h kube-system kube-scheduler-k8s-master 1/1 Running 0 23h k8s-node 加入集群 # 复制k8s-master的输出信息 kubeadm join 192.168.30.130:6443 --token 56bthi.poohqb2p2mavk1am \\ --discovery-token-ca-cert-hash sha256:c964563c7a38a633746225ff6d23f40fde626d7d796b01bffb299a84efbdcf82 # 等待加入成功 kubectl get nodes k8s-master Ready control-plane,master 23h v1.22.2 k8s-node1 Ready \u0026lt;none\u0026gt; 23h v1.22.2 k8s-node2 Ready \u0026lt;none\u0026gt; 23h v1.22.2 测试k8s集群 # 创建nginx容器 kubectl create deployment nginx --image=nginx # 暴露对外端口 kubectl expose deployment nginx --port=80 --type=NodePort # 扩容副本 kubectl scale deployment nginx --replicas=3 # 查看nginx是否运行成功 kubectl get pod,svc NAME READY STATUS RESTARTS AGE pod/nginx-6799fc88d8-2bps9 1/1 Running 0 23h pod/nginx-6799fc88d8-9psfx 1/1 Running 0 22h pod/nginx-6799fc88d8-tnfrk 1/1 Running 0 22h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 23h service/nginx NodePort 10.102.105.92 \u0026lt;none\u0026gt; 80:31150/TCP 23h root@k8s-master:~# # 浏览器访问 http://192.168.30.130:31150 http://192.168.30.131:31150 http://192.168.30.132:31150 均可以成功访问 ","date":"December 10, 2024 Thursday","permalink":"https://www.litao.in/posts/20241210_k8s_cluster_construction/","tags":["k8s"],"title":"K8s Cluster Construction"},{"contents":"这是本博客的第一篇文章，以后会慢慢更新一些平时我觉的有意思的文章，比如生活，技术，心情等。\n下面是本博客大概部分主题截图。\n好！今天结束！\nScreenshots Home blog archive search about reward 404 Quick Start The simplest way is to start with the example site coming with this theme, then you can play around and add your own stuff.\n$ mkdir hugo_test \u0026amp;\u0026amp; cd hugo_test $ mkdir themes \u0026amp;\u0026amp; cd themes $ git clone https://github.com/StinkyPeach/hugo-simple-theme.git $ cp -r hugo-simple-theme/exampleSite/** ../ $ cd .. $ hugo serve -D --port 8000 Now enter localhost:8000 in the address bar of your browser.\nWechat Pay \u0026amp; Alipay Rewards You can enable Wechat Pay \u0026amp; Alipay to allow readers send you money. So if they like your articles, you may even get rewards from your writing. Now you must be motivated to write more.\nIf this helps you, if you can star this repository, I will be very grateful, thank you!\n","date":"November 26, 2024 Thursday","permalink":"https://www.litao.in/posts/20241126_welcome_to_my_blog/","tags":null,"title":"Welcome To My Blog"}]